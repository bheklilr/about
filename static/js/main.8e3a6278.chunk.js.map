{"version":3,"sources":["Home.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["Nav","styled","ul","_templateObject","NavItem","li","_templateObject2","NavItemLink","Link","_templateObject3","HomeContainer","div","_templateObject4","Header","_templateObject5","Section","_templateObject6","Intro","_templateObject7","Career","_templateObject8","Projects","_templateObject9","Education","_templateObject10","Life","_templateObject11","Paragraph","p","_templateObject12","JobList","_templateObject13","Job","_templateObject14","Company","span","_templateObject15","StartDate","_templateObject16","EndDate","_templateObject17","JobTitle","_templateObject18","Role","_templateObject19","Home","react_default","a","createElement","to","id","App","className","react_router_dom","basename","react_router","exact","path","component","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.8e3a6278.chunk.js","sourcesContent":["import React from 'react';\nimport { Link } from 'react-router-dom';\nimport styled from 'styled-components';\n\nconst Nav = styled.ul`\n    list-style-type: none;\n    display: flex;\n    align-items: center;\n    justify-content: center;\n    padding: 0;\n    margin: 0;\n    height: 100px;\n`;\n\nconst NavItem = styled.li`\n    flex-grow: 1;\n    text-align: center;\n    display: flex;\n    align-items: center;\n    justify-content: center;\n    height: 100%;\n    font-size: 1.75rem;\n    font-weight: 700;\n\n    transition: background-color 0.3s ease;\n    &:hover {\n        background-color: #3d3255;\n    }\n`;\n\nconst NavItemLink = styled(Link)`\n    text-decoration: none;\n    color: inherit;\n    width: 100%;\n    height: 100%;\n    flex-grow: 1;\n    display: flex;\n    align-items: center;\n    justify-content: center;\n`;\n\nconst HomeContainer = styled.div`\n    \n`;\n\nconst Header = styled.div`\n`;\n\nconst Section = styled.div`\n    width: 100vw;\n    padding-bottom: 20px;\n`;\n\nconst Intro = styled(Section)`\n    background-color: #332841;\n`;\n\nconst Career = styled(Section)`\n    background-color: #282a41;\n`;\n\nconst Projects = styled(Section)`\n    background-color: #242d3a;\n`;\n\nconst Education = styled(Section)`\n    background-color: #223038;\n`\n\nconst Life = styled(Section)`\n    background-color: #1c2c2e;\n`\n\nconst Paragraph = styled.p`\n    font-size: 1.1rem;\n    line-height: 1.25;\n    text-align: justify;\n    width: 75vw;\n    margin: 0 auto;\n    padding: 20px 0;\n`;\n\nconst JobList = styled.ul`\n    list-style-type: none;\n    padding: 0;\n    margin: 0;\n\n    width: 75vw;\n    margin: 0 auto;\n    padding: 20px 0;\n`;\n\nconst Job = styled.li`\n    display: grid;\n    grid-template:\n        \"company    company .       start   end\"    auto\n        \"title      title   title   title   title\"  auto\n        \".          role    role    role    role\"   auto\n        /1fr        3fr     3fr     3fr     3fr\n        ;\n    grid-row-gap: 10px;\n    padding: 20px 0;\n`;\n\nconst Company = styled.span`\n    grid-area: company;\n    font-weight: 700;\n`;\n\nconst StartDate = styled.span`\n    grid-area: start;\n    font-size: 1.15rem;\n    text-align: right;\n`;\n\nconst EndDate = styled.span`\n    grid-area: end;\n    font-size: 1.15rem;\n    text-align: right;\n`;\n\nconst JobTitle = styled.span`\n    grid-area: title;\n    font-size: 1.25rem;\n    font-weight: 700;\n`;\n\nconst Role = styled.p`\n    grid-area: role;\n    font-size: 1.1rem;\n    line-height: 1.25;\n    text-align: justify;\n    padding: 0;\n    margin: 0;\n`;\n\nexport default () => (\n    <HomeContainer>\n        <Header>\n            <Nav>\n                <NavItem><NavItemLink to=\"#intro\">Me</NavItemLink></NavItem>\n                <NavItem><NavItemLink to=\"#career\">Career</NavItemLink></NavItem>\n                <NavItem><NavItemLink to=\"#projects\">Projects</NavItemLink></NavItem>\n                <NavItem><NavItemLink to=\"#education\">Education</NavItemLink></NavItem>\n                <NavItem><NavItemLink to=\"#life\">Life</NavItemLink></NavItem>\n            </Nav>\n        </Header>\n        <Intro id=\"intro\">\n            <Paragraph>\n                I am an electrical engineer who turned to the dark side of software engineering.\n                Realizing the error of my ways, I have left the path of building circuits, systems,\n                and gizmos for the more satisfying world of building applications and software\n                systems.\n            </Paragraph>\n            <Paragraph>\n                While I worked for a time as an engineer, in all honesty the job was still mainly\n                software oriented, and only became more so over time as the team became more \n                specialized. As I became more experienced, I was also able to design and build\n                a number of systems, tools, and platforms that boosted the capabilities of my\n                teammates and coworkers. Through this, I discovered a passion for developing\n                software.\n            </Paragraph>\n            <Paragraph>\n                Now, I have abandoned my electrical engineering career in favor of software\n                engineering, although I do still enjoy scientific computing and learning about\n                physical systems that can be understood through the lens of software.\n            </Paragraph>\n        </Intro>\n        <Career id=\"career\">\n            <JobList>\n                <Job>\n                    <Company>Southwest Power Pool</Company>\n                    <StartDate>May 2018</StartDate>\n                    <EndDate>Present</EndDate>\n                    <JobTitle>Programmer/Analyst II</JobTitle>\n                    <Role>Placeholder</Role>\n                </Job>\n                <Job>\n                    <Company>Molex, LLC</Company>\n                    <StartDate>Feb 2016</StartDate>\n                    <EndDate>May 2018</EndDate>\n                    <JobTitle>Software Engineer</JobTitle>\n                    <Role>Placeholder</Role>\n                </Job>\n                <Job>\n                    <Company>Molex, LLC</Company>\n                    <StartDate>May 2013</StartDate>\n                    <EndDate>Feb 2016</EndDate>\n                    <JobTitle>Electrical Test Engineer</JobTitle>\n                    <Role>Placeholder</Role>\n                </Job>\n            </JobList>\n        </Career>\n        <Projects id=\"projects\">\n            <Paragraph>\n                Projects placeholder\n            </Paragraph>\n        </Projects>\n        <Education id=\"education\">\n            <Paragraph>\n                education placeholder\n            </Paragraph>\n        </Education>\n        <Life id=\"life\">\n            <Paragraph>\n                life placeholder\n            </Paragraph>\n        </Life>\n    </HomeContainer>\n)","import React from 'react';\nimport { Route, HashRouter } from \"react-router-dom\";\n\nimport Home from './Home';\n\nconst App: React.FC = () => {\n  return (\n    <div className=\"app\">\n      <HashRouter basename=\"/\">\n        <Route exact path=\"/\" component={Home} />\n      </HashRouter>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}